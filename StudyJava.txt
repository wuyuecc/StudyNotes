字符串
Java中字符采用Unicode编码，所以可以包含中文等亚洲字符
String是不可变字符串，StringBuffer和StringBuilder是可变字符串
StringBuffer是线程安全的，StringBuilder是单线程版本，效率更高
String常量采用字符串池(String Pool)管理技术
空字符串有内存，而null没有分配内存

面向对象基础
封装、继承、多态，Java是单继承，但可以实现多个接口
类的声明，[]表示可选，|表示或，abstract表示抽象类，final表示不能被继承
[public] [abstract|final] class className [extends superclassName] [implements interfaceNameList] {
  //类体
}
成员变量声明，static表示静态变量（类变量），final表示变量不能被修改
[public|protected|private] [static] [final] type variableName;
成员方法声明，abstract方法必须在子类中被实现，final方法在子类中不能被覆盖(override)，native方法使用JNI技术调用C代码，synchronized用于保证线程安全
[public|protected|private] [static] [abstract|final] [native] [synchronized] type methodName ([parameterLis]) [throws exceptionList] {
  //方法体
}
包名全是小写字母，编译器把包对应于文件系统的目录管理（源文件和字节码文件）
package pkg1[.pkg2[.pkg3...]];
方法重载(overload)通过参数列表不同（参数个数不同或者参数类型不同）实现，返回值不能用于来区分重载
Java类成员的访问控制有4个等级：私有(private)，默认(没有关键字)，保护(protected),公有(public)，默认级别为同一个包，保护级别为不同包的子类

对象
对象的类型为引用类型，即类、接口和数组
对象的声明和实例化，如int array[]=new int[10]; String name=new String("Hello");
构造方法有3个特点：与类同名，没有返回值（包括void），只能与new结合使用
this指向对象本身，可以调用成员变量、成员方法、其他构造方法
C++通过delete手动释放不再使用的对象，Java和C#有垃圾回收(garbage collection)，Objective-C和Swift有自动引用计数(Automatic Reference Counting)

继承与多态
子类使用super关键字调用父类构造方法
final修饰的变量即常量，final修饰的成员变量只能在构造方法或静态代码块中初始化

抽象类与接口
抽象类中有0~n个抽象方法和0~n个具体方法，抽象方法所在的类一定是抽象类，抽象方法只有声明，没有实现，即没有大括号{}部分
public abstract class Figure{
  public abstract void onDraw();
}
接口中成员变量都是静态变量，方法都是抽象方法（Java8以后可以添加默认方法和静态方法）
C++多继承，两个父类有相同的方法，子类继承哪个方法会有冲突，Java接口只有抽象方法，实现它们不会有冲突
接口中只有静态常量，没有实例成员变量，也因此没有且不需要构造方法
当需要维护一个对象的信息和状态时，用抽象类，接口不行

枚举类
C++中枚举类型本质是int，而Java中枚举类型是引用类型，本质是类
[public] enum enumName {
  //枚举常量列表
}
枚举类的构造方法是私有的，不允许在外部创建对象，类似于单例设计模式和工厂设计模式
Java中引用类型比较有==和equals两种，==比较是否指向同一个对象，equals比较对象内容是否相同，对枚举类型两者等价，因为每个枚举常量只有1个实例

Java常用类，内部类，Lambda表达式

异常处理
Error是程序无法恢复的错误，如JVM内部错误、内存溢出、资源耗尽等
Exception是程序可以恢复的异常，如除0异常、空指针访问、网络连接中断、读取不存在的文件等
多个异常可以用多个catch块（按catch顺序捕获），或者catch中用或"|"来连接异常
释放资源可以用finally代码块或者Java7后提供的自动资源管理(automatic resource management)技术
try{
    //可能发生异常的语句
} catch(Throwable e1){
    //处理异常e1
} catch(Throwable e2){
    //处理异常e2
} finally{
    //释放资源
}
throws用于方法后声明抛出异常，throw用于人工引发异常

对象容器
常用的三个接口，List,Set,Map,分别有实现类，ArrayList和LinkedList,HashSet,HashMap
List元素是有序的，Set元素是不重复的，Map的键(key)值(value)成对出现，key不能重复

泛型
C++模板(template)和Java泛型(generics)不同
1.C++模板接受基本类型，Java泛型只接受引用类型（若调用传入基本数据类型，会自动装箱装换成引用类型）
2.C++中，编译器用类型参数来扩充模板（缺点是代码膨胀），List<A>和List<B>是两个不同的类
  Java中，编译器会“擦除”类型参数，替换为限定类型或Object，ArrayList<A>和ArrayList<B>是同一个类
  如ArrayList<String> a = new ArrayList<String>(); --> ArrayList a = new ArrayList();

文件管理和I/O流
Java使用File类对文件和目录操作，路径的文件分隔符，UNIX、Linux、macOS上用正斜杠/，Windows上用反斜杠\，但是反斜杠前要加转义符，即\\
I/O流有字节流和字符流，字节流以byte字节为基本单位，字符流以双字节Unicode字符为基本单位

多线程编程
进程是一个运行中的程序，每个进程有自己独立的内存空间和系统资源，一个进程内的多个线程，共享内存空间和系统资源
Java程序启动后由JVM创建主线程，主线程负责子线程的创建、启动、挂起、停止等操作，UI由主线程负责处理
主线程执行入口是main(String[] args)方法，子线程执行入口是线程执行对象（实现Runnable接口对象）的run()方法
Thread构造方法：Thread(Runnable target)和Thread(Runnable target, String name)
创建线程对象有两种方法
1.实现Runnable接口（覆写run()方法），作为Thread构造方法的传入参数
2.继承Thread类（由于Thread类也实现了Runnable接口，所以也是覆写run()方法）
Java只支持单继承，当开发图形界面的应用时，需要一个类即是窗口（继承JFrame）又是线程体，此时只能采用实现Runnable接口方式
如果线程体使用的地方不错，可以不单独定义一个类，使用匿名内部类或者Lambda表达式直接实现Runnable接口，如下
Thread t1=new Thread(new Runnable(){
    @Override
    public void run(){
        //线程体
    }
});
线程状态有新建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、死亡(dead)这5种状态
线程对象被new创建出来后为新建状态，主线程调用新建线程的start()方法后，进入就绪状态，等待CPU调度，CPU调度就绪状态的线程，线程进入运行状态，此时独占CPU（对于单核CPU），线程由于加锁、调用sleep()方法休眠、其他线程调用了join()方法、等待I/O操作、调用wait()方法，进入阻塞状态，等到休眠结束、其他线程完成或等待超时、I/O操作完成、其他线程调用notify或notifyAll唤醒wait线程，重新回到就绪状态线程正常执行完run()方法或由于发生异常，退出run()方法后，进入死亡状态
影响线程获得CPU时间的因素，除了线程优先级（整数1~10表示，最低为1），还与操作系统有关
当前线程调用t1线程的join()方法，则阻塞当前线程，等待t1线程结束或超时，使用场景是当前线程依赖于t1线程的运行结果
yield()方法可以给同优先级或更高优先级的线程让步，但使用很少，大多使用sleep()方法
stop()、suspend()、resume()等方法有时会引发严重的系统故障，已经不推荐使用，推荐做法是结束变量方式，如while(!command.equals("exit"))
多线程同步，可以加互斥锁，有两种方式
1.sychronized修饰方法，对方法进行同步
2.sychronized语句，后跟小括号把要同步的对象括起来，再跟大括号把要同步的代码括起来（主要用于第三方类，不方便修改代码，可以只修改调用代码）

网络编程
java.net包提供的类和接口分两种，基于Socket的（TCP、UDP协议），和基于URL的（HTTP、HTTPS协议）
GUI的应用中，主线程中调用accept()会阻塞主线程，导致无法进行任何界面操作，就是“卡”住，所以最好把accept()放到子线程中
ConnectException异常是服务器拒绝了客户端请求，有两种可能：1.服务器没启动端口没打开2.服务器请求队列已满
数据交换格式主要分为纯文本格式、XML格式和JSON格式，后两者可以带有描述信息，称为“自描述的”结构化文档
一般JSON所用的字节数比XML少，轻量级，适合Web和移动平台开发对于流量少速度快的要求
HTTP最常用的两种请求方法：GET和POST
GET请求，显示地把发送给服务器的参数放在URL的？之后，采用键值对形式，多个参数之间用&分隔，如type=JSON&action=query
POST请求，把参数放在请求体中，接触的人看不到
GET和POST本质上都是TCP连接，GET产生一个TCP包（header和data一起发送），POST产生两个TCP包（先发送header，服务器相应100 continue，再发送data，服务器相应200 OK并返回数据）

反射
Java作为一种静态语言需要编译后才能运行，通过反射机制，可以在运行时动态加载类，而不是编译期
一些框架开发中把要实例化的类名保存到配置文件中（可以随时修改配置文件而无需修改代码），运行时从配置文件中读取类名字符串，动态创建对象，建立依赖关系。采用new创建对象时依赖关系是在编译期建立的，反射机制能将依赖关系推迟到运行时建立
反射机制通过setAccessible(true)可以在类外部访问私有方法和成员变量，功能强大，但是破坏了面向对象的封装性
